#OPENSSL_INC=R:\include
#OPENSSL_LIB=C:\Program Files (x86)\GnuWin32\lib

OPENSSL_INC=C:\OpenSSL-Win64\include
OPENSSL_LIB=C:\OpenSSL-Win64\lib

# HOME
#PROTOC_INC=C:\Program1\include
#PROTOC_LIB=C:\Program1\lib
#PROTOC_BIN=C:\Program1\bin
# OFFICE x64
PROTOC_INC=C:\Program Files (x86)\include
PROTOC_LIB=C:\Program Files (x86)\lib
PROTOC_BIN=C:\Program Files (x86)\bin

## Quick and dirty
LDLIBPATH=/LIBPATH:"$(PROTOC_LIB)"
LDLIBPATH=$(LDLIBPATH) /LIBPATH:"C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.10.25017\lib\onecore\x64"
LDLIBPATH=$(LDLIBPATH) /LIBPATH:"C:\Program Files (x86)\Windows Kits\10\Lib\10.0.15063.0\um\x64"
LDLIBPATH=$(LDLIBPATH) /LIBPATH:"C:\Program Files (x86)\Windows Kits\10\Lib\10.0.15063.0\ucrt\x64"

!IF "$(COMDB2_ROOT)" == ""
COMDB2_ROOT=\\opt\\bb
!ENDIF
CFLAGS_DEF=/DCOMDB2_ROOT=$(COMDB2_ROOT)

!IF "$(OPENSSL_INC)" == ""
CFLAGS_DEF=$(CFLAGS_DEF) /DWITH_SSL=0
!ELSEIF "$(OPENSSL_LIB)" == ""
CFLAGS_DEF=$(CFLAGS_DEF) /DWITH_SSL=0
!ELSE
CFLAGS_DEF=$(CFLAGS_DEF) /DWITH_SSL=1
CFLAGS_INC=$(CFLAGS_INC) /I"$(OPENSSL_INC)"
!ENDIF

!IF "$(PROTOC_INC)" == ""
!ERROR MISSING PROTOC INCLUDE DIRECTORY
!ELSEIF "$(PROTOC_LIB)" == ""
!ERROR MISSING PROTOC LIBRARY DIRECTORY
!ELSEIF "$(PROTOC_BIN)" == ""
!ERROR MISSING PROTOC BIN DIRECTORY
!ELSE
CFLAGS_INC=$(CFLAGS_INC) /I"$(PROTOC_INC)"
!ENDIF

!IF "$(CONFIG)" == ""
CONFIG=Release
!ENDIF

!IF "$(CONFIG)" == "Release"
CFLAGS_CFG=/MT /O2 /W4 /wd4100 /wd4127 /wd4201
!ELSE
CFLAGS_CFG=/MTd /Zi /Od /W4 /wd4127 /wd4201 /Fd"libcdb2api_src" /FD
LDFLAGS_CFG=/debug
!ENDIF

CFLAGS_INC=/I..\bbinc /I..\bb $(CFLAGS_INC) /Iport\inc /Iport\inc\win32
CFLAGS_DEF=$(CFLAGS_DEF) -DSBUF2_SERVER=0

# Build a DLL unless instructed otherwise.
!IFNDEF CDB2API_STATIC_LIBRARY
CFLAGS_DEF=$(CFLAGS_DEF) -DBUILD_DLL
!ENDIF

CC=cl.exe
CFLAGS=/nologo $(CFLAGS_CFG) $(CFLAGS_INC) $(CFLAGS_DEF) /c

DLL=libcdb2api.dll
LD=link.exe /DLL /incremental:no
LDLIBS=protobuf-c.lib kernel32.lib user32.lib uuid.lib wsock32.lib ws2_32.lib libcmt.lib /nodefaultlib:msvcrt.lib
# Uncomment the line below for backward compatibility.
DOWNLEVEL=WindowsApp_downlevel.lib OneCore_downlevel.lib mincore_downlevel.lib
LDLIBS=$(LDLIBS) $(DOWNLEVEL)

!IFNDEF MSVC_VER
MSVC_VER=1900
!ENDIF
!IF $(MSVC_VER) >= 1900
LDLIBS=$(LDLIBS) legacy_stdio_definitions.lib
!ENDIF

LDFLAGS=$(LDFLAGS) $(LDLIBS) $(LDLIBPATH) $(LDFLAGS_CFG)

LIB=libcdb2api.a
AR=lib.exe
ARFLAGS=

CORE_OBJECTS=cdb2api.obj
PROTOC_OBJECTS=sqlquery.pb-c.obj sqlresponse.pb-c.obj
PORT_OBJECTS=gethostid.obj gettimeofday.obj poll.obj pthread.obj strndup.obj WSAStrError.obj
OBJECTS=$(CORE_OBJECTS) $(PROTOC_OBJECTS) $(PORT_OBJECTS)

.c.obj::
	$(CC) @<<
	$(CFLAGS) $<
<<

{port\impl\win32\}.c.obj::
	$(CC) @<<
	$(CFLAGS) $<
<<

ALL: "$(LIB)" "$(DLL)"

.PHONY: ALL CLEAN

sqlquery.pb-c.c: ..\protobuf\sqlquery.proto
	"$(PROTOC_BIN)\protoc-c" -I..\protobuf --c_out=. $**

sqlresponse.pb-c.c: ..\protobuf\sqlresponse.proto
	"$(PROTOC_BIN)\protoc-c" -I..\protobuf --c_out=. $**

sqlquery.pb-c.obj: sqlquery.pb-c.c
sqlresponse.pb-c.obj: sqlresponse.pb-c.c

"$(DLL)": $(OBJECTS)
	$(LD) @<<
	$(LDFLAGS) $(OBJECTS) /pdb:$*.pdb /implib:$*.lib /out:$@
<<
	
"$(LIB)": $(OBJECTS)
	$(AR) @<<
	$(ARFLAGS) $(OBJECTS) /out:$@
<<

TEST: ALL
	$(CC) t.c -DCDB2API_STATIC_LIBRARY $(LIB) /link $(LDLIBPATH) $(LDLIBS) /out:t.a.exe
	$(CC) t.c /link $(LDLIBPATH) $(LDLIBS) libcdb2api.lib /out:t.dll.exe

CLEAN:
	-@ERASE /Q *.obj
	-@ERASE /Q *.dll
	-@ERASE /Q *.lib
	-@ERASE /Q *.exp
	-@ERASE /Q *.exe
	-@ERASE /Q *.idb
	-@ERASE /Q *.pdb
	-@ERASE /Q *.a
	-@ERASE /Q sqlquery.pb-c.*
	-@ERASE /Q sqlresponse.pb-c.*
